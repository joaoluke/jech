#ifndef JECH_TOKENIZER_H
#define JECH_TOKENIZER_H

/**
 * Token types used in the lexical analysis phase
 */
typedef enum
{
	// Keywords
	TOKEN_SAY,
	TOKEN_KEEP,
	TOKEN_WHEN,

	// Data types
	TOKEN_STRING,
	TOKEN_NUMBER,
	TOKEN_BOOL,

	// Symbols and literals
	TOKEN_LPAREN,	 // (
	TOKEN_RPAREN,	 // )
	TOKEN_LBRACE,	 // {
	TOKEN_RBRACE,	 // }
	TOKEN_EQUAL,	 // =
	TOKEN_SEMICOLON, // ;

	// New operators:
	TOKEN_PLUS,	 // +
	TOKEN_MINUS, // -
	TOKEN_STAR,	 // *
	TOKEN_SLASH, // /
	TOKEN_EQEQ,	 // ==
	TOKEN_GT,	 // >
	TOKEN_LT,	 // <

	// Identifiers and misc
	TOKEN_IDENTIFIER,
	TOKEN_EOF,
	TOKEN_UNKNOWN
} JechTokenType;

/**
 * Token structure with type and value
 */
typedef struct
{
	JechTokenType type;
	char value[256];
	int line;
	int column;
} JechToken;

/**
 * List of tokens generated by the lexer
 */
typedef struct
{
	JechToken tokens[128];
	int count;
} JechTokenList;

/**
 * Lexical analysis function â€“ converts source code to a token list
 */
JechTokenList _JechTokenizer_Lex(const char *source);

#endif
